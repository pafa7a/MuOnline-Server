// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.2
// source: src/messages/connect.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface Wrapper {
  type: string;
  payload: Uint8Array;
}

export interface ServerInfo {
  name: string;
  ip: string;
  port: number;
  id: number;
  loadPercentage: number;
}

export interface ServerGroupInfo {
  name: string;
  servers: ServerInfo[];
}

export interface ServerGroupList {
  serverGroups: ServerGroupInfo[];
}

function createBaseWrapper(): Wrapper {
  return { type: "", payload: new Uint8Array(0) };
}

export const Wrapper: MessageFns<Wrapper> = {
  encode(message: Wrapper, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    if (message.payload.length !== 0) {
      writer.uint32(18).bytes(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Wrapper {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWrapper();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.payload = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Wrapper {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(0),
    };
  },

  toJSON(message: Wrapper): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Wrapper>, I>>(base?: I): Wrapper {
    return Wrapper.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Wrapper>, I>>(object: I): Wrapper {
    const message = createBaseWrapper();
    message.type = object.type ?? "";
    message.payload = object.payload ?? new Uint8Array(0);
    return message;
  },
};

function createBaseServerInfo(): ServerInfo {
  return { name: "", ip: "", port: 0, id: 0, loadPercentage: 0 };
}

export const ServerInfo: MessageFns<ServerInfo> = {
  encode(message: ServerInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.ip !== "") {
      writer.uint32(18).string(message.ip);
    }
    if (message.port !== 0) {
      writer.uint32(24).int32(message.port);
    }
    if (message.id !== 0) {
      writer.uint32(32).int32(message.id);
    }
    if (message.loadPercentage !== 0) {
      writer.uint32(45).float(message.loadPercentage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ip = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.port = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 45) {
            break;
          }

          message.loadPercentage = reader.float();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerInfo {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      ip: isSet(object.ip) ? globalThis.String(object.ip) : "",
      port: isSet(object.port) ? globalThis.Number(object.port) : 0,
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      loadPercentage: isSet(object.loadPercentage) ? globalThis.Number(object.loadPercentage) : 0,
    };
  },

  toJSON(message: ServerInfo): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.ip !== "") {
      obj.ip = message.ip;
    }
    if (message.port !== 0) {
      obj.port = Math.round(message.port);
    }
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.loadPercentage !== 0) {
      obj.loadPercentage = message.loadPercentage;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerInfo>, I>>(base?: I): ServerInfo {
    return ServerInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerInfo>, I>>(object: I): ServerInfo {
    const message = createBaseServerInfo();
    message.name = object.name ?? "";
    message.ip = object.ip ?? "";
    message.port = object.port ?? 0;
    message.id = object.id ?? 0;
    message.loadPercentage = object.loadPercentage ?? 0;
    return message;
  },
};

function createBaseServerGroupInfo(): ServerGroupInfo {
  return { name: "", servers: [] };
}

export const ServerGroupInfo: MessageFns<ServerGroupInfo> = {
  encode(message: ServerGroupInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.servers) {
      ServerInfo.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerGroupInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerGroupInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.servers.push(ServerInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerGroupInfo {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      servers: globalThis.Array.isArray(object?.servers) ? object.servers.map((e: any) => ServerInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: ServerGroupInfo): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.servers?.length) {
      obj.servers = message.servers.map((e) => ServerInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerGroupInfo>, I>>(base?: I): ServerGroupInfo {
    return ServerGroupInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerGroupInfo>, I>>(object: I): ServerGroupInfo {
    const message = createBaseServerGroupInfo();
    message.name = object.name ?? "";
    message.servers = object.servers?.map((e) => ServerInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseServerGroupList(): ServerGroupList {
  return { serverGroups: [] };
}

export const ServerGroupList: MessageFns<ServerGroupList> = {
  encode(message: ServerGroupList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.serverGroups) {
      ServerGroupInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerGroupList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerGroupList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.serverGroups.push(ServerGroupInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerGroupList {
    return {
      serverGroups: globalThis.Array.isArray(object?.serverGroups)
        ? object.serverGroups.map((e: any) => ServerGroupInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ServerGroupList): unknown {
    const obj: any = {};
    if (message.serverGroups?.length) {
      obj.serverGroups = message.serverGroups.map((e) => ServerGroupInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ServerGroupList>, I>>(base?: I): ServerGroupList {
    return ServerGroupList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ServerGroupList>, I>>(object: I): ServerGroupList {
    const message = createBaseServerGroupList();
    message.serverGroups = object.serverGroups?.map((e) => ServerGroupInfo.fromPartial(e)) || [];
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
